import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ReservePC {
    public static void main(String[] args) {
        // Swing GUI는 EDT (Event Dispatch Thread)에서 실행해야 함
        SwingUtilities.invokeLater(() -> {
            // 첫 번째 JFrame 생성 (사용자1, 사용자2, 사용자3 버튼 + 관리자 버튼)
            JFrame frame = new JFrame("강의실 좌석 예약 시스템");

            // 종료 버튼 클릭 시 프로그램 종료
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            // 레이아웃 설정 (여기서는 BorderLayout을 사용하여 상단과 하단에 배치)
            frame.setLayout(new BorderLayout(10, 20));  // BorderLayout을 사용하여 위와 아래에 배치

            // 사용자 버튼 패널 생성
            JPanel userPanel = new JPanel();
            userPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 20)); // FlowLayout을 사용해 왼쪽 정렬로 버튼 배치
            JButton button1 = new JButton("사용자1");
            JButton button2 = new JButton("사용자2");
            JButton button3 = new JButton("사용자3");

            // 사용자 버튼 클릭 시, 'PC1', 'PC2', 'PC3' 버튼이 있는 새 화면을 띄움
            button1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showPCButtons("사용자1");
                }
            });

            button2.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showPCButtons("사용자2");
                }
            });

            button3.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showPCButtons("사용자3");
                }
            });

            // 버튼들을 사용자 패널에 추가
            userPanel.add(button1);
            userPanel.add(button2);
            userPanel.add(button3);

            // 관리자 버튼 패널 생성 (배경색을 핑크로 설정)
            JPanel adminPanel = new JPanel();
            JButton button4 = new JButton("관리자");
            button4.setBackground(Color.PINK);

            // 관리자 버튼 클릭 시, 관리자가 사용하는 화면을 띄움
            button4.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showAdminScreen();
                }
            });

            // 관리자 버튼을 관리자 패널에 추가
            adminPanel.add(button4);

            // 사용자 버튼 패널을 프레임의 상단에 배치
            frame.add(userPanel, BorderLayout.NORTH);
            // 관리자 버튼 패널을 프레임의 하단에 배치
            frame.add(adminPanel, BorderLayout.SOUTH);

            // JFrame 크기 설정 (너비 250, 높이 400)
            frame.setSize(300, 200);

            // 화면에 표시
            frame.setVisible(true);
        });
    }

    // 새로운 창을 띄우는 메서드 (PC1, PC2, PC3, PC4, PC5, PC6 버튼)
    private static void showPCButtons(String user) {
        // 새로운 JFrame 생성 (PC1, PC2, PC3, PC4, PC5, PC6 버튼을 포함한 화면)
        JFrame pcFrame = new JFrame(user + "의 좌석 예약");

        // 종료 버튼 클릭 시 프로그램 종료
        pcFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 레이아웃 설정 (여기서는 BorderLayout을 사용하여 위쪽에 교탁 버튼 배치)
        pcFrame.setLayout(new BorderLayout(10, 20));

        // 교탁 버튼 패널 생성
        JPanel podiumPanel = new JPanel();
        JButton podiumButton = new JButton("교탁");
        podiumButton.setBackground(Color.BLUE);
        podiumButton.setForeground(Color.WHITE);

        // 교탁 버튼 클릭 시 관리자 접근 여부 확인
        podiumButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int response = JOptionPane.showConfirmDialog(pcFrame,
                        "관리자만 접근할 수 있습니다. 관리자 화면으로 이동하시겠습니까?",
                        "관리자 접근 확인", JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.YES_OPTION) {
                    showAdminLogin();
                }
            }
        });

        podiumPanel.add(podiumButton);

        // PC 버튼 6개 생성
        JPanel pcPanel = new JPanel();
        pcPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 20));
        JButton pcButton1 = new JButton("PC1");
        JButton pcButton2 = new JButton("PC2");
        JButton pcButton3 = new JButton("PC3");
        JButton pcButton4 = new JButton("PC4");
        JButton pcButton5 = new JButton("PC5");
        JButton pcButton6 = new JButton("PC6");

        // 각 버튼에 ActionListener 추가하여 클릭 시 랜덤 문제 발생
        addSeatReservationActionListener(pcButton1, pcFrame);
        addSeatReservationActionListener(pcButton2, pcFrame);
        addSeatReservationActionListener(pcButton3, pcFrame);
        addSeatReservationActionListener(pcButton4, pcFrame);
        addSeatReservationActionListener(pcButton5, pcFrame);
        addSeatReservationActionListener(pcButton6, pcFrame);

        // 버튼들을 각 패널에 추가
        pcPanel.add(pcButton1);
        pcPanel.add(pcButton2);
        pcPanel.add(pcButton3);
        pcPanel.add(pcButton4);
        pcPanel.add(pcButton5);
        pcPanel.add(pcButton6);

        // 패널을 프레임에 추가 (교탁 버튼 패널은 북쪽(North), PC 버튼 패널은 중앙(Center)에 배치)
        pcFrame.add(podiumPanel, BorderLayout.NORTH);
        pcFrame.add(pcPanel, BorderLayout.CENTER);

        // 새로운 JFrame 크기 설정
        pcFrame.setSize(550, 200);

        // 화면에 표시
        pcFrame.setVisible(true);
    }

    // 좌석 예약 확인을 위한 메서드
    private static void addSeatReservationActionListener(JButton pcButton, JFrame pcFrame) {
        pcButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 랜덤으로 PC에 문제가 생겼다고 메시지를 출력
                if (Math.random() < 0.5) {  // 50% 확률로 문제가 발생
                    JOptionPane.showMessageDialog(pcFrame,
                            "PC에 문제가 있습니다. 관리자에게 문의하세요.",
                            "문제 발생", JOptionPane.ERROR_MESSAGE);

                    // 버튼 색상과 글자 색을 변경
                    pcButton.setBackground(Color.PINK);  // 핑크색
                    pcButton.setText("PC 문제");  // 텍스트 변경
                    pcButton.setForeground(Color.BLACK);  // 글자 색을 검정색으로

                    // 버튼을 비활성화
                    pcButton.setEnabled(false);
                } else {
                    // 정상적으로 예약 확인
                    int response = JOptionPane.showConfirmDialog(pcFrame,
                            "좌석을 예약하시겠습니까?",
                            "좌석 예약 확인", JOptionPane.YES_NO_OPTION);

                    // "확인" 버튼 클릭 시
                    if (response == JOptionPane.YES_OPTION) {
                        // 좌석 예약 완료 메시지
                        JOptionPane.showMessageDialog(pcFrame, "좌석 예약이 완료되었습니다!");

                        // 버튼 색상과 글자 색 변경
                        pcButton.setBackground(Color.YELLOW);  // 예약 완료 색상
                        pcButton.setText("예약완료");  // 버튼 텍스트 변경
                        pcButton.setForeground(Color.BLACK);  // 글자 색 변경

                        // 버튼을 60분 동안 비활성화시키기 위해 Timer 설정
                        Timer timer = new Timer(3600000, new ActionListener() {  // 60분 = 3600000 밀리초
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                // 시간 종료 후 버튼 활성화
                                pcButton.setEnabled(true);
                            }
                        });
                        timer.setRepeats(false);  // 타이머가 한 번만 실행되도록 설정
                        timer.start();

                        // 버튼 비활성화
                        pcButton.setEnabled(false);
                    }
                }
            }
        });
    }

    // 관리자가 사용하는 화면을 띄우는 메서드
    private static void showAdminScreen() {
        // 새로운 JFrame 생성 (관리자 화면)
        JFrame adminFrame = new JFrame("관리자 화면");

        // 종료 버튼 클릭 시 프로그램 종료
        adminFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 레이아웃 설정 (여기서는 세로 방향으로 버튼들을 배치)
        adminFrame.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 20));

        // 관리자 화면에 필요한 버튼을 추가할 수 있음 (예: 좌석 상태 확인 등)
        // 예시로 "관리자 화면"이라는 라벨을 추가
        JLabel adminLabel = new JLabel("관리자 화면입니다.");
        adminFrame.add(adminLabel);

        // 화면 크기 설정
        adminFrame.setSize(250, 150);
        adminFrame.setVisible(true);
    }

    // 관리자 아이디 입력 다이얼로그를 띄우는 메서드
    private static void showAdminLogin() {
        JPanel panel = new JPanel();
        panel.add(new JLabel("아이디 입력:"));
        JTextField adminIdField = new JTextField(10);
        panel.add(adminIdField);

        // 관리자 아이디 입력 다이얼로그 표시
        int option = JOptionPane.showConfirmDialog(null, panel, "관리자 아이디 입력", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (option == JOptionPane.OK_OPTION) {
            String adminId = adminIdField.getText();
            if ("admin".equals(adminId)) {
                JOptionPane.showMessageDialog(null, "관리자 화면으로 이동합니다.");
                showAdminScreen();  // 관리자 화면으로 이동
            } else {
                JOptionPane.showMessageDialog(null, "잘못된 아이디입니다.");
            }
        }
    }
}
