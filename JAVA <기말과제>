// 2020011932 김영민

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ReservePC {

    // 좌석 예약 상태를 배열에 저장 (true: 예약됨, false: 예약되지 않음)
    static boolean[] seatReserved = new boolean[6]; // 6개의 PC 좌석 나열 

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            // 첫 번째 화면 (사용자1, 사용자2, 사용자3 버튼 + 관리자 버튼)
            JFrame frame = new JFrame("강의실 좌석 예약 시스템");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setLayout(new BorderLayout(10, 20));

            // "예약할 계정을 선택해주세요" 문구를 표시하는 패널
            JPanel instructionPanel = new JPanel();
            JLabel instructionLabel = new JLabel("예약할 계정을 선택해주세요");
            instructionPanel.add(instructionLabel);

            // 사용자 버튼 패널
            JPanel userPanel = new JPanel();
            userPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 20));
            JButton button1 = new JButton("사용자1");
            JButton button2 = new JButton("사용자2");
            JButton button3 = new JButton("사용자3");

            // 사용자 버튼 클릭 시, 'PC1', 'PC2', 'PC3' 버튼이 있는 두번째 화먄으로 이동
            button1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showPCButtons("사용자1");
                }
            });

            button2.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showPCButtons("사용자2");
                }
            });

            button3.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showPCButtons("사용자3");
                }
            });

            // 버튼들을 사용자 패널에 추가
            userPanel.add(button1);
            userPanel.add(button2);
            userPanel.add(button3);





            // 관리자 버튼 패널
            JPanel adminPanel = new JPanel();
            JButton button4 = new JButton("관리자");
            button4.setBackground(Color.PINK);

            // 교탁 버튼 클릭 시 관리자 접근 여부 확인하는 창
            button4.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int response = JOptionPane.showConfirmDialog(adminPanel,
                            "관리자만 접근할 수 있습니다. 관리자 화면으로 이동하시겠습니까?",
                            "관리자 접근 확인", JOptionPane.YES_NO_OPTION);
                    if (response == JOptionPane.YES_OPTION) {
                        showAdminLogin();
                    }
                }
            });

            // 관리자 버튼 클릭 시, 관리자가 사용하는 화면으로 이동
            button4.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showAdminScreen();
                }
            });

            // 관리자 버튼을 관리자 패널에 추가
            adminPanel.add(button4);

            // 사용자 버튼 패널을 프레임의 상단에 배치
            frame.add(instructionPanel, BorderLayout.NORTH);
            frame.add(userPanel, BorderLayout.CENTER); 
            // 관리자 버튼 패널을 프레임의 하단에 배치
            frame.add(adminPanel, BorderLayout.SOUTH);

            frame.setSize(330, 200);

            frame.setVisible(true);
        });
    }







    // 두번째 화면 (PC1, PC2, PC3, PC4, PC5, PC6 버튼)
    private static void showPCButtons(String user) {
   
        JFrame pcFrame = new JFrame(user + "의 좌석 예약");
        pcFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pcFrame.setLayout(new BorderLayout(10, 20));

        // 교탁 버튼 패널 생성
        JPanel podiumPanel = new JPanel();
        JButton podiumButton = new JButton("교탁");
        podiumButton.setBackground(Color.BLUE);
        podiumButton.setForeground(Color.WHITE);

        // 교탁 버튼 클릭 시 관리자 접근 여부 확인하는 창
        podiumButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int response = JOptionPane.showConfirmDialog(pcFrame,
                        "관리자만 접근할 수 있습니다. 관리자 화면으로 이동하시겠습니까?",
                        "관리자 접근 확인", JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.YES_OPTION) {
                    showAdminLogin();
                }
            }
        });

        podiumPanel.add(podiumButton);






        // PC 좌석 6개 생성
        JPanel pcPanel = new JPanel();
        pcPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 20));
        JButton pcButton1 = new JButton("PC1");
        JButton pcButton2 = new JButton("PC2");
        JButton pcButton3 = new JButton("PC3");
        JButton pcButton4 = new JButton("PC4");
        JButton pcButton5 = new JButton("PC5");
        JButton pcButton6 = new JButton("PC6");

        // 각 버튼에 액션리스너 추가하여 클릭 시 랜덤으로 상태 문제 발생
        addSeatReservationActionListener(pcButton1, pcFrame);
        addSeatReservationActionListener(pcButton2, pcFrame);
        addSeatReservationActionListener(pcButton3, pcFrame);
        addSeatReservationActionListener(pcButton4, pcFrame);
        addSeatReservationActionListener(pcButton5, pcFrame);
        addSeatReservationActionListener(pcButton6, pcFrame);

        // 버튼들을 각 패널에 추가
        pcPanel.add(pcButton1);
        pcPanel.add(pcButton2);
        pcPanel.add(pcButton3);
        pcPanel.add(pcButton4);
        pcPanel.add(pcButton5);
        pcPanel.add(pcButton6);

        // 이전 화면으로 돌아가는 버튼 추가
        JButton backButton = new JButton("이전화면");
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 현재 창을 닫고 첫 번째 화면으로 돌아가기
                pcFrame.dispose(); // 현재 PC 화면을 닫음

            }
        });

        // 이전 화면 버튼을 하단에 추가
        JPanel backButtonPanel = new JPanel();
        backButtonPanel.add(backButton);

        // 패널을 프레임에 추가 (교탁 버튼 패널은 북쪽(North), PC 버튼 패널은 중앙(Center)에 배치)
        pcFrame.add(podiumPanel, BorderLayout.NORTH);
        pcFrame.add(pcPanel, BorderLayout.CENTER);
        pcFrame.add(backButtonPanel, BorderLayout.SOUTH);
        
        pcFrame.setSize(550, 200);
        pcFrame.setVisible(true);
    }







    // 좌석 예약 확인 화면
    private static void addSeatReservationActionListener(JButton pcButton, JFrame pcFrame) {
        pcButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 조건문을 사용하여 랜덤으로 PC에 문제가 생겼다고 메시지를 출력
                if (Math.random() < 0.5) {  // 일단 50% 확률로 문제가 발생하도록 설정
                    JOptionPane.showMessageDialog(pcFrame,
                            "PC에 문제가 있습니다. 관리자에게 문의하세요.",
                            "문제 발생", JOptionPane.ERROR_MESSAGE);

                    // 문제 발생시 버튼 색상과 글자 색을 변경
                    pcButton.setBackground(Color.PINK);  // 핑크색
                    pcButton.setText("PC 문제");  // 텍스트 변경
                    pcButton.setForeground(Color.BLACK);  // 글자색을 검정색으로

                    // 문제 발생시 버튼 비활성화
                    pcButton.setEnabled(false);

                } else {
                    // 정상적으로 예약 확인
                    int response = JOptionPane.showConfirmDialog(pcFrame,
                            "좌석을 예약하시겠습니까?",
                            "좌석 예약 확인", JOptionPane.YES_NO_OPTION);

                    // "확인" 버튼 클릭 시
                    if (response == JOptionPane.YES_OPTION) {
                        // 좌석 예약 완료
                        JOptionPane.showMessageDialog(pcFrame, "좌석 예약이 완료되었습니다!");

                        // 예약 완료시 버튼 색상과 글자색 변경
                        pcButton.setBackground(Color.YELLOW);  // 예약 완료 색상
                        pcButton.setText("예약완료");  // 버튼 텍스트 변경
                        pcButton.setForeground(Color.BLACK);  // 글자색 변경

                        // 예약 완료된 자리는 버튼 비활성화
                        pcButton.setEnabled(false);
                    }
                }
            }
        });
    }





    // 관리자 화면 만들기
    private static void showAdminScreen() {

        // 새로운 JFrame 생성 (관리자 화면)
        JFrame adminFrame = new JFrame("관리자 화면");
        adminFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 레이아웃 설정 (여기서는 세로 방향으로 버튼들을 배치)
        adminFrame.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 20));

        // "좌석상태" 버튼 추가
        JButton seatStatusButton = new JButton("좌석상태");
        seatStatusButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showSeatStatus();
            }
        });


        // "예약확인" 버튼 추가
        JButton reservationCheckButton = new JButton("예약확인");
        reservationCheckButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showReservationStatus();
            }
        });

        // 버튼들을 관리자 화면에 추가
        adminFrame.add(seatStatusButton);
        adminFrame.add(reservationCheckButton);

        adminFrame.setSize(220, 120);
        adminFrame.setVisible(true);
    }





    // 좌석 상태 확인 화면
    private static void showSeatStatus() {
        StringBuilder status = new StringBuilder("예약 불가능한 좌석:\n");
        // 좌석 배열에 대한 조건문을 사용하여 예약 불가능한 좌석 표시
        for (int i = 0; i < seatReserved.length; i++) {
            if (seatReserved[i]) {
                status.append("PC" + (i + 1) + " ");
            }
        }
        JOptionPane.showMessageDialog(null, status.toString(), "좌석상태", JOptionPane.INFORMATION_MESSAGE);
    }

    // 예약 확인 화면
    private static void showReservationStatus() {
        StringBuilder status = new StringBuilder("현재 예약된 좌석:\n");
        // 좌석 배열에 대한 조건문을 사용하여 이미 예약된 좌석 표시
        for (int i = 0; i < seatReserved.length; i++) {
            if (seatReserved[i]) {
                status.append("PC" + (i + 1) + " 예약완료\n");
            }
        }
        JOptionPane.showMessageDialog(null, status.toString(), "예약확인", JOptionPane.INFORMATION_MESSAGE);
    }






    // 관리자 아이디 입력 화면
    private static void showAdminLogin() {
        JPanel panel = new JPanel();
        panel.add(new JLabel("아이디 입력:"));
        JTextField adminIdField = new JTextField(10);

        // 편의상 아이디 입력칸에 "admin"을 자동으로 입력되도록 설정
        adminIdField.setText("admin");
        panel.add(adminIdField);

        // 관리자 아이디 입력창 표시
        int option = JOptionPane.showConfirmDialog(null, panel, "관리자 아이디 입력", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (option == JOptionPane.OK_OPTION) {
            String adminId = adminIdField.getText();
            if ("admin".equals(adminId)) {
                JOptionPane.showMessageDialog(null, "관리자 화면으로 이동합니다.");
                showAdminScreen(); 
            } else {
                JOptionPane.showMessageDialog(null, "잘못된 아이디입니다.");
            }
        }
    }
}
